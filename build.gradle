plugins {
  id 'application'
  id 'jacoco'
  id 'io.spring.dependency-management' version '1.0.9.RELEASE'
  id 'org.springframework.boot' version '2.2.6.RELEASE'
  id 'org.owasp.dependencycheck' version '5.3.2.1'
  id 'com.github.ben-manes.versions' version '0.28.0'
  id 'org.sonarqube' version '2.8'
}

group = 'uk.gov.hmcts.ethos.ecm'
version = '0.0.1'

allprojects {
  sourceCompatibility = '1.8'
  targetCompatibility = '1.8'
}

jacocoTestReport {
  executionData(test)
  reports {
    xml.enabled = true
    csv.enabled = false
    xml.destination file("${buildDir}/reports/jacoco/test/jacocoTestReport.xml")
  }
}

def sonarExclusions = ['**/uk/gov/hmcts/reform/ethos/ecm/consumer/config/**',
                       '**/uk/gov/hmcts/reform/ethos/ecm/consumer/model/**',
                       '**/uk/gov/hmcts/reform/ethos/ecm/consumer/Application'
]

sonarqube {
  println "echo sonarqube"
  properties {
    property "sonar.exclusions", sonarExclusions.join(', ')
    property "sonar.projectKey", "ecm-consumer"
    property "sonar.dynamicAnalysis", "reuseReports"
    property "sonar.dependencyCheck.reportPath", "${project.buildDir}/reports/dependency-check-report.xml"
    property "sonar.coverage.jacoco.xmlReportPaths", "${jacocoTestReport.reports.xml.destination.path}"
  }
}

project.tasks['sonarqube'].dependsOn jacocoTestReport

sourceSets {
  test {
    java.srcDir 'src/test/java'
  }
  functional {
    java.srcDir 'src/test/functional/java'
    resources.srcDir 'src/test/functional/resources'
    compileClasspath += main.output + test.output
    runtimeClasspath += main.output + test.output
  }
}

configurations {
  functionalCompile.extendsFrom testCompile
  functionalRuntime.extendsFrom testRuntime
}

test {
  exclude '**/*ComponentTest*'
}

task smoke(type: Test, description: 'Runs the smoke tests.', group: 'Verification') {
  testClassesDirs = sourceSets.functional.output.classesDirs
  classpath = sourceSets.functional.runtimeClasspath

  useJUnit {
    includeCategories 'uk.gov.hmcts.ethos.ecm.consumer.functional.SmokeTest'
  }
}

task functional(type: Test, description: 'Runs the functional tests.', group: 'Verification') {
  testClassesDirs = sourceSets.functional.output.classesDirs
  classpath = sourceSets.functional.runtimeClasspath

  useJUnit {
    includeCategories 'uk.gov.hmcts.ethos.ecm.consumer.functional.SmokeTest'
  }

  maxHeapSize = '1G'
}

// before committing a change, make sure task still works
dependencyUpdates {
  def isNonStable = { String version ->
    def stableKeyword = ['RELEASE', 'FINAL', 'GA'].any { qualifier -> version.toUpperCase().contains(qualifier) }
    def regex = /^[0-9,.v-]+$/
    return !stableKeyword && !(version ==~ regex)
  }
  rejectVersionIf { selection -> // <---- notice how the closure argument is named
    return isNonStable(selection.candidate.version) && !isNonStable(selection.currentVersion)
  }
}

// https://jeremylong.github.io/DependencyCheck/dependency-check-gradle/configuration.html
dependencyCheck {
  // Specifies if the build should be failed if a CVSS score above a specified level is identified.
  // range of 0-10 fails the build, anything greater and it doesn't fail the build
  failBuildOnCVSS = System.getProperty('dependencyCheck.failBuild') == 'true' ? 0 : 11
  suppressionFile = 'config/owasp/suppressions.xml'

  analyzers {
    // Disable scanning of .NET related binaries
    assemblyEnabled = false
  }
}

dependencyManagement {
  dependencies {
    dependency group: 'org.bouncycastle', name: 'bcpkix-jdk15on', version: '1.65'
    // CVE-2018-10237 - Unbounded memory allocation
    dependencySet(group: 'com.google.guava', version: '29.0-jre') {
      entry 'guava'
    }
  }
}

repositories {
  mavenLocal()
  jcenter()
  mavenCentral()
  maven { url "https://dl.bintray.com/hmcts/hmcts-maven" }
}

def versions = [
  junitPlatform   : '1.6.2',
  reformLogging   : '5.1.1',
  springBoot      : springBoot.class.package.implementationVersion,
  springfoxSwagger: '2.9.2'
//  hmctsNotify     : '3.15.1-RELEASE'
]

dependencies {
  compileOnly 'org.projectlombok:lombok:1.18.12'
  annotationProcessor 'org.projectlombok:lombok:1.18.4'

  implementation group: 'org.springframework.boot', name: 'spring-boot-starter-web'
  implementation group: 'org.springframework.boot', name: 'spring-boot-starter-actuator'
  implementation group: 'org.springframework.boot', name: 'spring-boot-starter-aop'
  implementation group: 'org.springframework.boot', name: 'spring-boot-starter-json'
  implementation group: 'uk.gov.hmcts.reform', name: 'health-spring-boot-starter', version: '0.0.5'
  implementation group: 'uk.gov.hmcts.reform', name: 'ecm-common', version: '0.0.8'
  //implementation group: 'uk.gov.service.notify', name: 'notifications-java-client', version: versions.hmctsNotify

  implementation group: 'io.springfox', name: 'springfox-swagger2', version: versions.springfoxSwagger

  implementation group: 'uk.gov.hmcts.reform', name: 'logging', version: versions.reformLogging
  implementation group: 'uk.gov.hmcts.reform', name: 'logging-appinsights', version: versions.reformLogging
  implementation group: 'org.springframework.cloud', name: 'spring-cloud-starter-netflix-hystrix', version: '2.2.2.RELEASE'
  implementation group: 'uk.gov.hmcts.reform', name: 'properties-volume-spring-boot-starter', version: '0.0.4'

  testCompile (group: 'org.docx4j', name: 'docx4j', version: '6.1.2') {
    exclude module: 'slf4j-log4j12'
  }
  testCompile 'org.projectlombok:lombok:1.18.12'
  testCompile group: 'org.apache.commons', name: 'commons-io', version: '1.3.2'
  testCompile group: 'org.springframework.boot', name: 'spring-boot-starter-test', version: '2.2.7.RELEASE'
}

mainClassName = 'uk.gov.hmcts.reform.ethos.ecm.consumer.Application'

bootJar {
  getArchiveFileName().set(provider {
    'ecm-consumer.jar'
  })

  manifest {
    attributes('Implementation-Version': project.version.toString())
  }
}

wrapper {
    distributionType = Wrapper.DistributionType.ALL
}
